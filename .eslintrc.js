process.env.NODE_ENV = 'development';
const restrictedGlobals = require( 'confusing-browser-globals' );


const coreRules = {
  '@babel/object-curly-spacing': ['warn', 'always', {
    arraysInObjects: false, objectsInObjects: false,
  }],
  '@babel/no-invalid-this': 'warn',
  '@babel/semi': ['warn', 'always', { omitLastInOneLineBlock: true }],
  'object-curly-spacing': 'off',
  'no-invalid-this': 'off',
  'semi': 'off',

  'simple-import-sort/imports': 'error',
  'simple-import-sort/exports': 'error',
  'sort-imports': 'off',

  'import/default': ['warn'],
  'import/extensions': ['warn', 'never'],
  'import/first': 'warn',
  'import/named': 'warn',
  'import/newline-after-import': ['error', { count: 2 }],
  'import/no-amd': 'error',
  'import/no-anonymous-default-export': 'warn',
  'import/no-cycle': 'warn',
  'import/no-self-import': 'warn',
  'import/no-unresolved': 'warn',
  'import/no-unused-modules': 'off',
  'import/no-useless-path-segments': ['warn', { noUselessIndex: true }],
  'import/no-webpack-loader-syntax': 'error',
  'import/order': 'off',

  'array-bracket-newline': ['warn', 'consistent'],
  'array-bracket-spacing': ['warn', 'always', {
    singleValue: true, arraysInArrays: false, objectsInArrays: false,
  }],
  'array-callback-return': 'warn',
  'arrow-parens': ['warn', 'as-needed', { requireForBlockBody: true }],
  'brace-style': ['warn', '1tbs', { allowSingleLine: true }],
  'comma-dangle': ['warn', 'always-multiline'],
  'comma-spacing': ['warn', { before: false, after: true }],
  'computed-property-spacing': ['warn', 'always'],
  'curly': 'warn',
  'default-case': ['warn', { commentPattern: '^no default$' }],
  'dot-location': ['warn', 'property'],
  'dot-notation': 'warn',
  'eqeqeq': ['warn', 'smart'],
  'func-call-spacing': 'warn',
  'indent': ['warn', 2, { SwitchCase: 1 }],
  'jsx-quotes': ['warn', 'prefer-double'],
  'key-spacing': ['warn', { beforeColon: false, afterColon: true, mode: 'strict' }],
  'keyword-spacing': ['warn', { before: true, after: true }],
  'lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],
  'new-parens': 'warn',
  'no-array-constructor': 'warn',
  'no-caller': 'warn',
  'no-cond-assign': ['warn', 'except-parens'],
  'no-eval': 'warn',
  'no-extend-native': 'warn',
  'no-extra-bind': 'warn',
  'no-extra-label': 'warn',
  'no-extra-parens': ['warn', 'all', {
    ignoreJSX: 'multi-line', nestedBinaryExpressions: false, returnAssign: false,
  }],
  'no-extra-semi': 'warn',
  'no-floating-decimal': 'warn',
  'no-implied-eval': 'warn',
  'no-iterator': 'warn',
  'no-label-var': 'warn',
  'no-labels': ['warn', { allowLoop: true, allowSwitch: false }],
  'no-lone-blocks': 'warn',
  'no-loop-func': 'warn',
  'no-loss-of-precision': 'error',
  'no-mixed-operators': [
    'warn',
    {
      groups: [
        ['&', '|', '^', '~', '<<', '>>', '>>>'],
        ['==', '!=', '===', '!==', '>', '>=', '<', '<='],
        ['&&', '||'],
        ['in', 'instanceof'],
      ],
      allowSamePrecedence: false,
    },
  ],
  'no-multi-spaces': ['warn', { ignoreEOLComments: false }],
  'no-multi-str': 'warn',
  'no-native-reassign': 'warn',
  'no-negated-in-lhs': 'warn',
  'no-new-func': 'warn',
  'no-new-object': 'warn',
  'no-new-wrappers': 'warn',
  'no-octal-escape': 'warn',
  'no-redeclare': ['warn', { builtinGlobals: false }],
  'no-restricted-globals': ['error'].concat(restrictedGlobals),
  'no-restricted-properties': [
    'error',
    { object: 'require', property: 'ensure', message: 'Use import() instead.' },
    { object: 'System', property: 'import', message: 'Use import() instead.' },
  ],
  'no-restricted-syntax': ['warn', 'WithStatement'],
  'no-script-url': 'warn',
  'no-self-compare': 'warn',
  'no-sequences': 'warn',
  'no-shadow-restricted-names': 'warn',
  'no-sparse-arrays': 'warn',
  'no-template-curly-in-string': 'warn',
  'no-throw-literal': 'warn',
  'no-unused-expressions': [
    'error',
    { allowShortCircuit: true, allowTernary: true, allowTaggedTemplates: true },
  ],
  'no-unused-vars': ['warn', { vars: 'all', args: 'none', ignoreRestSiblings: true }],
  'no-use-before-define': [
    'warn', { functions: false, classes: false, variables: false },
  ],
  'no-useless-computed-key': 'warn',
  'no-useless-rename': [
    'warn', { ignoreDestructuring: false, ignoreImport: false, ignoreExport: false },
  ],
  'no-useless-return': 'warn',
  'no-whitespace-before-property': 'warn',
  'quotes': ['warn', 'single', { avoidEscape: true }],
  'quote-props': ['warn', 'consistent-as-needed'],
  'require-yield': 'warn',
  'rest-spread-spacing': ['warn', 'never'],
  'sort-vars': 'warn',
  'space-in-parens': ['warn', 'always'],
  'spaced-comment': ['warn', 'always', { block: { balanced: true } }],
  'strict': ['warn', 'never'],
  'template-curly-spacing': ['warn', 'never'],
  'unicode-bom': ['warn', 'never'],
  'wrap-iife': ['warn', 'inside', { functionPrototypeMethods: true }],

  'react/forbid-foreign-prop-types': ['warn', { allowInPropTypes: true }],
  'react/jsx-closing-bracket-location': 1,
  'react/jsx-curly-spacing': [
    'warn', { when: 'always', children: { when: 'always' } },
  ],
  'react/jsx-first-prop-new-line': ['warn', 'multiline'],
  'react/jsx-indent': [
    'warn', 2, { checkAttributes: true, indentLogicalExpressions: true },
  ],
  'react/jsx-indent-props': ['warn', 2],
  'react/jsx-no-comment-textnodes': 'warn',
  'react/jsx-no-duplicate-props': 'warn',
  'react/jsx-no-target-blank': 'warn',
  'react/jsx-pascal-case': ['warn', { allowAllCaps: true, ignore: [] }],
  'react/jsx-sort-props': [ 'warn', { callbacksLast: true, shorthandFirst: true }],
  'react/jsx-uses-react': 'warn',
  'react/jsx-uses-vars': 'warn',
  'react/no-danger-with-children': 'warn',
  'react/no-direct-mutation-state': 'warn',
  'react/no-is-mounted': 'warn',
  'react/no-typos': 'error',
  'react/style-prop-object': 'warn',

  'jsx-a11y/alt-text': 'warn',
  'jsx-a11y/anchor-has-content': 'warn',
  'jsx-a11y/anchor-is-valid': ['warn', { aspects: ['noHref', 'invalidHref'] }],
  'jsx-a11y/aria-activedescendant-has-tabindex': 'warn',
  'jsx-a11y/aria-props': 'warn',
  'jsx-a11y/aria-proptypes': 'warn',
  'jsx-a11y/aria-role': ['warn', { ignoreNonDOM: true }],
  'jsx-a11y/aria-unsupported-elements': 'warn',
  'jsx-a11y/heading-has-content': 'warn',
  'jsx-a11y/iframe-has-title': 'warn',
  'jsx-a11y/img-redundant-alt': 'warn',
  'jsx-a11y/no-access-key': 'warn',
  'jsx-a11y/no-distracting-elements': 'warn',
  'jsx-a11y/no-redundant-roles': 'warn',
  'jsx-a11y/role-has-required-aria-props': 'warn',
  'jsx-a11y/role-supports-aria-props': 'warn',
  'jsx-a11y/scope': 'warn',

  'jsdoc/check-indentation': 'warn',
  'jsdoc/check-syntax': 'warn',
  'jsdoc/require-hyphen-before-param-description': 'warn',
  'jsdoc/require-jsdoc': 'off',
  'jsdoc/require-param-description': 'off',
  'jsdoc/require-returns-check': 'warn',
  'jsdoc/require-returns-description': 'off',

  'promise/no-return-wrap': 'error',
  'promise/param-names': 'error',
  'promise/no-native': 'off',
  'promise/no-nesting': 'warn',
  'promise/no-promise-in-callback': 'warn',
  'promise/no-callback-in-promise': 'warn',
  'promise/no-new-statics': 'error',
  'promise/no-return-in-finally': 'warn',
  'promise/valid-params': 'warn',
  'promise/prefer-await-to-then': 'error',
}

module.exports = {
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:jsdoc/recommended',
  ],

  env: {
    browser: true,
    amd: true,
    es2020: true,
    commonjs: true,
    jest: true,
    node: true,
  },

  plugins: [
    '@babel',
    'import',
    'jsdoc',
    'jsx-a11y',
    'promise',
    'react',
    'react-hooks',
    'simple-import-sort',
  ],

  parser: '@babel/eslint-parser',

  parserOptions: {
    allowImportExportEverywhere: true,
    requireConfigFile: true,
    ecmaVersion: 2020,
    sourceType: 'module',
    babelOptions: {
      configFile: require.resolve( './babel.config.js' ),
    },
  },

  settings: {
    'import/resolver': {
      node: {
        paths: [ '.' ],
        extensions: [ '.js', '.jsx', '.ts', '.tsx' ],
      },
    },
    'react': { version: 'detect' },
    'linkComponents': [
      { name: 'Link', linkAttribute: 'to' },
    ],
  },

  reportUnusedDisableDirectives: true,

  rules: coreRules,

  overrides: [
    {
      files: [ '**/*.ts?(x)' ],
      parser: '@typescript-eslint/parser',
      parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
        ecmaFeatures: { jsx: true },
        warnOnUnsupportedTypeScriptVersion: true,
      },
      plugins: [ '@typescript-eslint' ],
      rules: {
        'default-case': 'off',
        'no-dupe-class-members': 'off',
        'no-undef': 'off',

        '@typescript-eslint/consistent-type-assertions': 'warn',
        'no-array-constructor': 'off',
        '@typescript-eslint/no-array-constructor': 'warn',
        'no-use-before-define': 'off',
        '@typescript-eslint/no-use-before-define': [
          'warn',
          { functions: false, classes: false, variables: false, typedefs: false },
        ],
        'no-unused-expressions': 'off',
        '@typescript-eslint/no-unused-expressions': [
          'error',
          { allowShortCircuit: true, allowTernary: true, allowTaggedTemplates: true },
        ],
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': [
          'warn', { args: 'none', ignoreRestSiblings: true },
        ],
        'no-useless-constructor': 'off',
        '@typescript-eslint/no-useless-constructor': 'warn',
      },
    },
    {
      files: [
        // 'config/**/*.js',
        // '.eslintrc.js',
        '.babel.config.js',
      ],
      rules: {
        ...coreRules,
        'simple-import-sort/imports': 'off',
        'import/order': [ 'error', { 'newlines-between': 'always' }],
      },
    },
  ],
};
